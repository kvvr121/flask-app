pipeline {
    agent { label 'k8s-tools' }

    environment {
        AWS_DEFAULT_REGION = 'us-west-2'
        EKS_CLUSTER_NAME = 'flask-app-cluster'
        ECR_REPOSITORY = 'flask-app-repo'
        IMAGE_NAME = "flask-app"
        DOCKER_REGISTRY = "${ECR_REPOSITORY}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        KUBE_NAMESPACE = 'flask-app-prod'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                    env.IMAGE_TAG = "${env.DOCKER_REGISTRY}/${env.IMAGE_NAME}:${env.BUILD_TAG}"
                }
                echo "Building image: ${env.IMAGE_TAG}"
            }
        }

        stage('Unit Tests') {
            steps {
                sh '''
                    echo "Running unit tests..."
                    python3 -m pip install --upgrade pip
                    pip install -r requirements.txt
                    python -m pytest tests/ --junitxml=pytest-report.xml || true
                '''
                publishTestResults testResultsPattern: 'pytest-report.xml'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                        echo "Building Docker image..."
                        docker build -t ${IMAGE_TAG} -f Dockerfile.prod .
                        docker tag ${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                        echo "Image built successfully: ${IMAGE_TAG}"
                    """
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh """
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${DOCKER_REGISTRY}
                        
                        echo "Creating ECR repository if it doesn't exist..."
                        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_DEFAULT_REGION} || \
                        aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_DEFAULT_REGION}
                        
                        echo "Pushing image to ECR..."
                        docker push ${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                        echo "Image pushed successfully to ECR"
                    """
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    sh """
                        echo "Deploying to staging..."
                        kubectl set image deployment/flask-app flask-app=${IMAGE_TAG} -n flask-app-staging || echo "Deployment update failed"
                        kubectl rollout status deployment/flask-app -n flask-app-staging --timeout=300s || echo "Rollout status check failed"
                        echo "Staging deployment completed"
                    """
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh """
                        echo "Deploying to production..."
                        kubectl set image deployment/flask-app flask-app=${IMAGE_TAG} -n ${KUBE_NAMESPACE} || echo "Production deployment update failed"
                        kubectl rollout status deployment/flask-app -n ${KUBE_NAMESPACE} --timeout=600s || echo "Production rollout status check failed"
                        echo "Production deployment completed"
                    """
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sh """
                        echo "Performing health check..."
                        kubectl get pods -n ${KUBE_NAMESPACE} -l app=flask-app
                        echo "Health check completed"
                    """
                }
            }
        }
    }

    post {
        always {
            sh """
                echo "Cleaning up Docker images..."
                docker image prune -f || true
                docker container prune -f || true
            """
        }
        success {
            echo "✅ Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed!"
        }
    }
}
